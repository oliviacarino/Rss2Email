<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tony's Blog</title><link>https://antoniosbarotsis.github.io/</link><description>Recent content on Tony's Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Jul 2022 22:11:09 +0200</lastBuildDate><item><title>BudgetFixture</title><link>https://antoniosbarotsis.github.io/posts/budget_fixture/</link><pubDate>Tue, 12 Jul 2022 22:11:09 +0200</pubDate><description>A Proof of Concept AutoFixture Clone in java.</description><summary>BudgetFixture BudgetFixture is a very minimal (budget one could say), proof of concept - clone of the AutoFixture package in Java.
My repository can be found here.
What is AutoFixture AutoFixture is a very handy .NET library that is
&amp;ldquo;designed to minimize the &amp;lsquo;Arrange&amp;rsquo; phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data.</summary></item><item><title>Simple JWT</title><link>https://antoniosbarotsis.github.io/posts/simple_jwt/</link><pubDate>Wed, 29 Jun 2022 18:16:47 +0200</pubDate><description>A simple JWT authorization scheme.</description><summary>Simple JWT Authorization with .NET Recently I have been working on a side project that needed a very simple toy-like auth scheme to be implemented. The last few times I implemented JWTs in .NET it was for a full-blown application which means that I made use of things like IdentityModel and UserManager, if you want a look at how I made that work you could take a look at the source code of Demeter.</summary></item><item><title>Veritas</title><link>https://antoniosbarotsis.github.io/posts/posharp/</link><pubDate>Sun, 06 Mar 2022 22:29:48 +0100</pubDate><description>My attempt at a testing framework.</description><summary>What is Veritas Veritas is a small testing framework that I am building for a friend&amp;rsquo;s compiler. He started working on this project recently and seeing as how I found it very interesting, I decided to contribute to it. I then remembered that I do not know how to build compilers so I instead decided to finally look into things like reflection and frameworks and decided to build one for his language.</summary></item><item><title>Zip it and ship it!</title><link>https://antoniosbarotsis.github.io/posts/zip_it_and_ship_it/</link><pubDate>Tue, 01 Feb 2022 19:05:19 +0200</pubDate><description>How I published a CLI tool in Chocolatey and Nuget.</description><summary>Introduction I recently started working on a command line tool that uses git hooks to remind you to run your tests and builds before pushing your code among other stuff and I decided to package that and publish it so anyone could use it. The project itself is nothing too impressive or innovative so in this post I will be mostly focusing on the packaging and publication process rather than the project itself but in case you are interested in checking it out, click here and go make some issues :)</summary></item><item><title>Testing an ASP .NET Core project</title><link>https://antoniosbarotsis.github.io/posts/aspnet_testing/</link><pubDate>Fri, 29 Oct 2021 16:12:35 +0200</pubDate><description>Tests and automated coverage reports with .NET and Github actions.</description><summary>Introduction Most Web API templates I could find online do not have testing pre configured in them and the official ones do not have it at all so I thought that I would make a post about setting up basic unit tests as well as mocking dependencies.
I will be using XUnit which is one of the most used testing frameworks for .NET as well as FakeItEasy for mocking. In the end I will also use Coverlet and Codecov for coverage reports.</summary></item><item><title>C# and the ELK stack</title><link>https://antoniosbarotsis.github.io/posts/cs_elk/</link><pubDate>Thu, 28 Oct 2021 22:04:54 +0200</pubDate><description>Integrating the ELK stack with C#.</description><summary>What is the ELK stack? With today&amp;rsquo;s applications growing in complexity rapidly, debugging and efficiently digesting logs have become crucial. That is the problem that the ELK stack is trying to solve.
The ELK stack consists of:
Elasticsearch: A distributed search engine with highly refined analytics capabilities Logstash: A data-processing pipeline that collects data and delivers it to Elasticsearch Kibana: A visualization platform built expressly for Elasticsearch These three together make for a great way of digesting aggregated logs from your application through visualisations.</summary></item></channel></rss>